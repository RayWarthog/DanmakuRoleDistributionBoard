{
  "SaveName": "",
  "GameMode": "",
  "Gravity": 0.5,
  "Date": "",
  "Table": "",
  "Sky": "",
  "Note": "",
  "Rules": "",
  "LuaScript": "",
  "LuaScriptState": "",
  "ObjectStates": [
    {
      "Name": "Custom_Model",
      "Transform": {
        "posX": 14.4787912,
        "posY": 1.06000006,
        "posZ": -15.6342306,
        "rotX": 1.27364774E-06,
        "rotY": 179.994659,
        "rotZ": 1.96996825E-06,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "",
      "Description": "Distribution Board",
      "ColorDiffuse": {
        "r": 0.9999998,
        "g": 0.992160261,
        "b": 0.9999998
      },
      "Locked": false,
      "Grid": true,
      "Snap": false,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "Hands": false,
      "CustomMesh": {
        "MeshURL": "https://lithi.io/FragaholiC/Secret.Hitler/board/discard.draw.board.obj",
        "DiffuseURL": "http://i.imgur.com/sHoBNQD.jpg",
        "NormalURL": "",
        "ColliderURL": "",
        "Convex": true,
        "MaterialIndex": 3,
        "TypeIndex": 4,
        "CastShadows": true
      },
      "LuaScript": "-- Warthog\r\n\r\n-- Issues:\r\n--\r\n-- Potential weird behaviors if any cards are deleted\r\n-- Currently using Mokou's character card to identify the character deck\r\n\r\nlocal versionString = '24/12/2017'\r\n\r\nlocal heroine_GUID = { '2dea91' }\r\nlocal rival_GUID = { 'b1eec7' }\r\nlocal stageBoss_basic_GUIDs = { '4fb09a', '05d5f3', 'd1943c' } --Stage Boss--\r\nlocal stageBoss_extra_GUIDs = { 'a6b0d8',                      --Challenger--\r\n                                '1c5b44',                      --Final Boss--\r\n                                'd2bdce' }                     --Anti-Heroine--\r\nlocal partner_basic_GUIDs = { '3f4b18', 'cd9fd0' } --Partner--\r\nlocal partner_extra_GUIDs = { '0ee562',            --One True Partner--\r\n                              '7538bf' }           --Ex Midboss--\r\nlocal exBoss_basic_GUIDs = { '3fde74' } --Ex Boss--\r\nlocal exBoss_extra_GUIDs = { 'f8f3ef',  --Phantasm Boss--\r\n                             '65d489',  --Lone Wolf--\r\n                             '8afe62' } --Secret Boss--\r\n\r\nlocal charInCharDeck_GUID = '4ff1a0'  --A random character card that is in the character deck, used to identify the charDeck\r\n-- local charCardsExtra_GUIDs = { '3670bb', 'e5c5d9', 'e1457f', '08491a' }\r\nlocal charCardsExtra_GUIDs = {}\r\n\r\nlocal seatedPlayersCounter = #getSeatedPlayers()\r\nlocal numPlayers = 4\r\n\r\nlocal deleteDiscardPileCondition = true\r\nlocal deleteBoardCondition = true\r\nlocal dealCardsCondition = true\r\nlocal basicDeckOnlyCondition = false\r\n\r\nlocal numOfCharToDeal = 2\r\nlocal secondScanDelayTime = 0.2\r\nlocal shuffleDelayTime = 1.0\r\nlocal dealDelayTime = 2.0\r\n\r\nfunction onload()\r\n  local buttonWidth = 500\r\n  local buttonHeight = 500\r\n  local fontSize = 300\r\n\r\n  local decreaseButton_parameters = {}\r\n  decreaseButton_parameters.click_function = 'decreasePlayers'\r\n  decreaseButton_parameters.function_owner = self\r\n  decreaseButton_parameters.label = '-'\r\n  decreaseButton_parameters.position = {-1,0.1,-2.0}\r\n  decreaseButton_parameters.width = buttonWidth\r\n  decreaseButton_parameters.height = buttonHeight\r\n  decreaseButton_parameters.font_size = fontSize\r\n\r\n  local shuffleButton_parameters = {}\r\n  shuffleButton_parameters.click_function = 'shuffleRoleAndDealCharButton'\r\n  shuffleButton_parameters.function_owner = self\r\n  shuffleButton_parameters.label = tostring(numPlayers)\r\n  shuffleButton_parameters.position = {0,0.1,-2.0}\r\n  shuffleButton_parameters.width = buttonWidth\r\n  shuffleButton_parameters.height = buttonHeight\r\n  shuffleButton_parameters.font_size = fontSize\r\n\r\n  local increaseButton_parameters = {}\r\n  increaseButton_parameters.click_function = 'increasePlayers'\r\n  increaseButton_parameters.function_owner = self\r\n  increaseButton_parameters.label = '+'\r\n  increaseButton_parameters.position = {1,0.1,-2.0}\r\n  increaseButton_parameters.width = buttonWidth\r\n  increaseButton_parameters.height = buttonHeight\r\n  increaseButton_parameters.font_size = fontSize\r\n\r\n  local lergeButtonWidth = 1480\r\n  local largeButtonHeight = 325\r\n  local largeFontSize = 100\r\n\r\n  local toggleDeleteDiscardButton_parameters = {}\r\n  toggleDeleteDiscardButton_parameters.click_function = 'toggleDeleteDiscardCondition'\r\n  toggleDeleteDiscardButton_parameters.function_owner = self\r\n  toggleDeleteDiscardButton_parameters.label = 'Delete unused role cards\\nafter shuffle:\\n' .. tostring(deleteDiscardPileCondition)\r\n  toggleDeleteDiscardButton_parameters.position = {0,0.1,-1.1}\r\n  toggleDeleteDiscardButton_parameters.width = lergeButtonWidth\r\n  toggleDeleteDiscardButton_parameters.height = largeButtonHeight\r\n  toggleDeleteDiscardButton_parameters.font_size = largeFontSize\r\n\r\n  local toggleDeleteBoardButton_parameters = {}\r\n  toggleDeleteBoardButton_parameters.click_function = 'toggleDeleteBoardCondition'\r\n  toggleDeleteBoardButton_parameters.function_owner = self\r\n  toggleDeleteBoardButton_parameters.label = 'Delete role distribution board\\nafter shuffle:\\n' .. tostring(deleteBoardCondition)\r\n  toggleDeleteBoardButton_parameters.position = {0,0.1,-0.4}\r\n  toggleDeleteBoardButton_parameters.width = lergeButtonWidth\r\n  toggleDeleteBoardButton_parameters.height = largeButtonHeight\r\n  toggleDeleteBoardButton_parameters.font_size = largeFontSize\r\n\r\n  local dealCardsConditionButton_parameters = {}\r\n  dealCardsConditionButton_parameters.click_function = 'toggleDealCardsCondition'\r\n  dealCardsConditionButton_parameters.function_owner = self\r\n  dealCardsConditionButton_parameters.label = 'Deal role cards after shuffle:\\n' .. tostring(dealCardsCondition)\r\n  dealCardsConditionButton_parameters.position = {0,0.1,0.3}\r\n  dealCardsConditionButton_parameters.width = lergeButtonWidth\r\n  dealCardsConditionButton_parameters.height = largeButtonHeight\r\n  dealCardsConditionButton_parameters.font_size = largeFontSize\r\n\r\n  local toggleNumOfCharToDealButton = {}\r\n  toggleNumOfCharToDealButton.click_function = 'toggleNumOfCharToDeal'\r\n  toggleNumOfCharToDealButton.function_owner = self\r\n  toggleNumOfCharToDealButton.label = 'Deal ' .. numOfCharToDeal .. ' character cards per player.'\r\n  toggleNumOfCharToDealButton.position = {0,0.1,1.0}\r\n  toggleNumOfCharToDealButton.width = lergeButtonWidth\r\n  toggleNumOfCharToDealButton.height = largeButtonHeight\r\n  toggleNumOfCharToDealButton.font_size = largeFontSize\r\n\r\n  local toggleBasicDeckButton = {}\r\n  toggleBasicDeckButton.click_function = 'toggleBasicDeck'\r\n  toggleBasicDeckButton.function_owner = self\r\n  toggleBasicDeckButton.label = 'Use all role card variants.'\r\n  toggleBasicDeckButton.position = {0,0.1,1.7}\r\n  toggleBasicDeckButton.width = lergeButtonWidth\r\n  toggleBasicDeckButton.height = largeButtonHeight\r\n  toggleBasicDeckButton.font_size = largeFontSize\r\n\r\n  -- Currently uses a blank function as a workaround\r\n  local versionButton_parameters = {}\r\n  versionButton_parameters.click_function = 'none'\r\n  toggleNumOfCharToDealButton.function_owner = self\r\n  versionButton_parameters.label = 'Version: ' .. versionString\r\n  versionButton_parameters.position = {0,0.1,2.8}\r\n  -- versionButton_parameters.rotation = {180,180,0}\r\n  versionButton_parameters.width = lergeButtonWidth - 200\r\n  versionButton_parameters.height = largeButtonHeight\r\n  versionButton_parameters.font_size = largeFontSize\r\n\r\n  self.createButton(decreaseButton_parameters)\r\n  self.createButton(shuffleButton_parameters)\r\n  self.createButton(increaseButton_parameters)\r\n\r\n  self.createButton(toggleDeleteDiscardButton_parameters)\r\n  self.createButton(toggleDeleteBoardButton_parameters)\r\n  self.createButton(dealCardsConditionButton_parameters)\r\n\r\n  self.createButton(toggleNumOfCharToDealButton)\r\n  self.createButton(toggleBasicDeckButton)\r\n\r\n  self.createButton(versionButton_parameters)\r\n\r\n  onPlayerChangedColor()\r\nend\r\n\r\n-- Detects number of seated players to determine numPlayers automatically\r\nfunction onPlayerChangedColor()\r\n  seatedPlayersCounter=#getSeatedPlayers()\r\n  if (seatedPlayersCounter >= 4 and seatedPlayersCounter <= 8) then\r\n    updateNumPlayers(seatedPlayersCounter)\r\n  end\r\nend\r\n\r\nfunction decreasePlayers()\r\n  if (numPlayers > 4) then\r\n    updateNumPlayers(numPlayers-1)\r\n  end\r\nend\r\n\r\nfunction increasePlayers()\r\n  if (numPlayers < 8) then\r\n    updateNumPlayers(numPlayers+1)\r\n  end\r\nend\r\n\r\nfunction updateNumPlayers(n)\r\n  numPlayers = n\r\n  local editedButton_parameters = {}\r\n  editedButton_parameters.index = 1\r\n  editedButton_parameters.label = tostring(numPlayers)\r\n  self.editButton(editedButton_parameters)\r\nend\r\n\r\nfunction shuffleRoleAndDealCharButton()\r\n  shuffleRoles()\r\n  dealCharCards()\r\nend\r\n\r\nfunction shuffleRoles()\r\n  local deckPile = {}\r\n  local discardPile = {}\r\n\r\n  local boardPosition = self.getPosition()\r\n  local deckPosition = {boardPosition[1]-5, boardPosition[2], boardPosition[3]}\r\n  local discardPosition = {boardPosition[1]+5, boardPosition[2], boardPosition[3]}\r\n  local rotation = {0,180,180}\r\n\r\n  -- Inserts the elements of a table into another\r\n  local function insertTableElementsToTable( fromTable, toTable )\r\n    if fromTable == nil or toTable == nil then\r\n      return\r\n    end\r\n    for key, value in pairs( fromTable ) do\r\n      table.insert(toTable, value)\r\n    end\r\n  end\r\n\r\n  -- Code taken from https://coronalabs.com/blog/2014/09/30/tutorial-how-to-shuffle-table-items/\r\n  local function shuffleTable( t )\r\n    local rand = math.random\r\n    assert( t, \"shuffleTable() expected a table, got nil\" )\r\n    local iterations = #t\r\n    local j\r\n\r\n    for i = iterations, 2, -1 do\r\n      j = rand(i)\r\n      t[i], t[j] = t[j], t[i]\r\n    end\r\n  end\r\n\r\n  -- Scans through the GUIDs, adding to deckPile and discardPile based on\r\n  -- number of roles required\r\n  local function scanRoleGUIDs(roleGUIDs, roleNum, roleName)\r\n    local notFoundedList = {}\r\n    local counter = 0\r\n    for i=1, #roleGUIDs do\r\n      local o = getObjectFromGUID(roleGUIDs[i])\r\n      if (counter < roleNum) then\r\n        if (o == nil) then\r\n          -- Searches all deck instead\r\n          local foundDeck = findDeckWithCardGUID(roleGUIDs[i])\r\n          if (foundDeck == nil) then\r\n            -- print('Error: ' .. roleName .. ' card ' .. roleGUIDs[i] .. ' not found.')\r\n            table.insert(notFoundedList, roleGUIDs[i])\r\n          else\r\n            o = foundDeck.takeObject({guid=roleGUIDs[i], position=deckPosition, rotation=rotation})\r\n            table.insert(deckPile, o)\r\n            counter = counter + 1\r\n          end\r\n        else\r\n          table.insert(deckPile, o)\r\n          counter = counter + 1\r\n        end\r\n      else\r\n        if (o == nil) then\r\n          -- Searches all deck instead\r\n          local foundDeck = findDeckWithCardGUID(roleGUIDs[i])\r\n          if (foundDeck != nil) then\r\n            o = foundDeck.takeObject({guid=roleGUIDs[i], position=discardPosition, rotation=rotation})\r\n            table.insert(discardPile, o)\r\n          else\r\n            table.insert(notFoundedList, roleGUIDs[i])\r\n          end\r\n        else\r\n          table.insert(discardPile, o)\r\n        end\r\n      end\r\n    end\r\n    -- if(counter < roleNum) then\r\n    --   print('Error: Required ' .. roleNum .. ' ' .. roleName .. ' cards but only found ' .. counter .. '.')\r\n    -- end\r\n\r\n    -- Does a second, delayed scan\r\n    local timer_parameters = {\r\n      identifier = 'roleDistributionSecondScanTimer' .. roleName,\r\n      function_name = 'findNotFoundedCardsAndMove_SecondScan',\r\n      function_owner = self,\r\n      parameters = {notFoundedList=notFoundedList, roleNum=roleNum, roleName=roleName, counter=counter, deckPosition=deckPosition, discardPosition=discardPosition, rotation=rotation},\r\n      delay = secondScanDelayTime,\r\n    }\r\n    Timer.create(timer_parameters)\r\n  end\r\n\r\n  local heroineNum = nil\r\n  local partnerNum = nil\r\n  local stageBossNum = nil\r\n  local extraBossNum = nil\r\n  local rivalNum = nil\r\n\r\n  if (numPlayers == 4) then\r\n    heroineNum = 1\r\n    partnerNum = 0\r\n    stageBossNum = 2\r\n    extraBossNum = 1\r\n    rivalNum = 0\r\n  elseif (numPlayers == 5) then\r\n    heroineNum = 1\r\n    partnerNum = 1\r\n    stageBossNum = 2\r\n    extraBossNum = 1\r\n    rivalNum = 0\r\n  elseif (numPlayers == 6) then\r\n    heroineNum = 1\r\n    partnerNum = 1\r\n    stageBossNum = 3\r\n    extraBossNum = 1\r\n    rivalNum = 0\r\n  elseif (numPlayers == 7) then\r\n    heroineNum = 1\r\n    partnerNum = 2\r\n    stageBossNum = 3\r\n    extraBossNum = 1\r\n    rivalNum = 0\r\n  elseif (numPlayers == 8) then\r\n    heroineNum = 1\r\n    partnerNum = 2\r\n    stageBossNum = 3\r\n    extraBossNum = 1\r\n    rivalNum = 1\r\n  end\r\n\r\n  math.randomseed( os.time() )\r\n\r\n  local extra_GUIDs = {}\r\n\r\n  -- Heroine, only 1\r\n  scanRoleGUIDs(heroine_GUID, heroineNum, 'Heroine')\r\n\r\n  -- Partner\r\n  local partner_GUIDs = {}\r\n  insertTableElementsToTable(partner_basic_GUIDs, partner_GUIDs)\r\n  if not basicDeckOnlyCondition then\r\n    insertTableElementsToTable(partner_extra_GUIDs, partner_GUIDs)\r\n  else\r\n    insertTableElementsToTable(partner_extra_GUIDs, extra_GUIDs)\r\n  end\r\n  if (partnerNum > 0) then\r\n    shuffleTable(partner_GUIDs)\r\n  end\r\n  scanRoleGUIDs(partner_GUIDs, partnerNum, 'Partner')\r\n\r\n  -- Stage Boss\r\n  local stageBoss_GUIDs = {}\r\n  insertTableElementsToTable(stageBoss_basic_GUIDs, stageBoss_GUIDs)\r\n  if not basicDeckOnlyCondition then\r\n    insertTableElementsToTable(stageBoss_extra_GUIDs, stageBoss_GUIDs)\r\n  else\r\n    insertTableElementsToTable(stageBoss_extra_GUIDs, extra_GUIDs)\r\n  end\r\n  shuffleTable(stageBoss_GUIDs)\r\n  scanRoleGUIDs(stageBoss_GUIDs, stageBossNum, 'Stage boss')\r\n\r\n  -- Extra Boss\r\n  local exBoss_GUIDs = {}\r\n  insertTableElementsToTable(exBoss_basic_GUIDs, exBoss_GUIDs)\r\n  if not basicDeckOnlyCondition then\r\n    insertTableElementsToTable(exBoss_extra_GUIDs, exBoss_GUIDs)\r\n  else\r\n    insertTableElementsToTable(exBoss_extra_GUIDs, extra_GUIDs)\r\n  end\r\n  shuffleTable(exBoss_GUIDs)\r\n  scanRoleGUIDs(exBoss_GUIDs, extraBossNum, 'Extra boss')\r\n\r\n  -- Rival\r\n  scanRoleGUIDs(rival_GUID, rivalNum, 'Rival')\r\n\r\n  -- Discard extra cards if basic deck only option is selected\r\n  scanRoleGUIDs(extra_GUIDs, 0, 'Extra')\r\n\r\n  shuffleTable(deckPile)\r\n  for k,v in pairs(deckPile) do\r\n    deckPile[k].setRotation(rotation)\r\n    deckPile[k].setPosition(deckPosition)\r\n  end\r\n\r\n  for k,v in pairs(discardPile) do\r\n    if (deleteDiscardPileCondition) then\r\n      discardPile[k].destruct()\r\n    else\r\n      discardPile[k].setRotation(rotation)\r\n      discardPile[k].setPosition(discardPosition)\r\n    end\r\n  end\r\n\r\n  -- Shuffles the deck with heroine after shuffleDelayTime\r\n  local timer_parameters = {\r\n    identifier = 'roleDistributionShuffleTimer',\r\n    function_name = 'shuffleDeckWithCardGUID',\r\n    function_owner = self,\r\n    parameters = {cardGUID=heroine_GUID[1]},\r\n    delay = shuffleDelayTime,\r\n  }\r\n  Timer.create(timer_parameters)\r\n\r\n  if (dealCardsCondition) then\r\n    -- Deals the deck with heroine after dealDelayTime\r\n    local timer_parameters = {\r\n      identifier = 'roleDistributionDealTimer',\r\n      function_name = 'dealDeckWithCardGUID',\r\n      function_owner = self,\r\n      -- parameters = {cardGUID=heroine_GUID[1], cardNum=numPlayers},\r\n      parameters = {cardGUID=heroine_GUID[1], cardNum=1},\r\n      delay = dealDelayTime,\r\n    }\r\n    Timer.create(timer_parameters)\r\n  end\r\n\r\n  if(deleteBoardCondition) then\r\n    self.destruct()\r\n  end\r\nend\r\n\r\nfunction dealCharCards()\r\n  if (numOfCharToDeal == 0) then\r\n    return\r\n  end\r\n\r\n  charDeck = findDeckWithCardGUID(charInCharDeck_GUID)\r\n  if (charDeck == nil) then\r\n    print('Error: Character deck with card ' .. charInCharDeck_GUID .. ' not found.')\r\n    return\r\n  end\r\n  local charDeckPosition = charDeck.getPosition()\r\n  -- local rotation = charDeck.getRotation()\r\n\r\n  -- rotation[1] = 0\r\n\r\n  local rotation = {0,90,180}\r\n\r\n  charDeck.setRotation(rotation)\r\n\r\n  -- Put the cards all over the table on to the character deck\r\n  for i=1, #charCardsExtra_GUIDs do\r\n    local o = getObjectFromGUID(charCardsExtra_GUIDs[i])\r\n    if (o == nil) then\r\n      print('Error: Character card ' .. charCardsExtra_GUIDs[i] .. ' not found.')\r\n    else\r\n      o.setPosition(charDeckPosition)\r\n      o.setRotation(rotation)\r\n    end\r\n  end\r\n\r\n  -- Shuffles the deck after shuffleDelayTime\r\n  local timer_parameters = {\r\n    identifier = 'characterShuffleTimer',\r\n    function_name = 'shuffleDeckWithCardGUID',\r\n    function_owner = self,\r\n    parameters = {cardGUID=charInCharDeck_GUID},\r\n    delay = shuffleDelayTime,\r\n  }\r\n  Timer.create(timer_parameters)\r\n\r\n  -- Deals the deck with charInCharDeck_GUID card after dealDelayTime\r\n  local timer2_parameters = {\r\n    identifier = 'characterDealTimer',\r\n    function_name = 'dealDeckWithCardGUID',\r\n    function_owner = self,\r\n    -- parameters = {cardGUID=charInCharDeck_GUID, cardNum=numPlayers*numOfCharToDeal},\r\n    parameters = {cardGUID=charInCharDeck_GUID, cardNum=numOfCharToDeal},\r\n    delay = dealDelayTime,\r\n  }\r\n  Timer.create(timer2_parameters)\r\nend\r\n\r\nfunction toggleDeleteDiscardCondition()\r\n  deleteDiscardPileCondition = not deleteDiscardPileCondition\r\n  local editedButton_parameters = {}\r\n  editedButton_parameters.index = 3\r\n  editedButton_parameters.label = 'Delete unused role cards\\nafter shuffle:\\n' .. tostring(deleteDiscardPileCondition)\r\n  self.editButton(editedButton_parameters)\r\nend\r\n\r\nfunction toggleDeleteBoardCondition()\r\n  deleteBoardCondition = not deleteBoardCondition\r\n  local editedButton_parameters = {}\r\n  editedButton_parameters.index = 4\r\n  editedButton_parameters.label = 'Delete role distribution board\\nafter shuffle:\\n' .. tostring(deleteBoardCondition)\r\n  self.editButton(editedButton_parameters)\r\nend\r\n\r\nfunction toggleDealCardsCondition()\r\n  dealCardsCondition = not dealCardsCondition\r\n  local editedButton_parameters = {}\r\n  editedButton_parameters.index = 5\r\n  editedButton_parameters.label = 'Deal role cards after shuffle:\\n' .. tostring(dealCardsCondition)\r\n  self.editButton(editedButton_parameters)\r\nend\r\n\r\nfunction toggleNumOfCharToDeal()\r\n  if (numOfCharToDeal == 0) then\r\n    updateNumOfCharToDeal(2)\r\n  elseif (numOfCharToDeal == 2) then\r\n    updateNumOfCharToDeal(3)\r\n  elseif (numOfCharToDeal == 3) then\r\n    updateNumOfCharToDeal(0)\r\n  end\r\nend\r\n\r\nfunction updateNumOfCharToDeal(n)\r\n  numOfCharToDeal = n\r\n  local editedButton_parameters = {}\r\n  editedButton_parameters.index = 6\r\n  editedButton_parameters.label = 'Deal ' .. numOfCharToDeal .. ' character cards per player.'\r\n  self.editButton(editedButton_parameters)\r\nend\r\n\r\nfunction toggleBasicDeck()\r\n  basicDeckOnlyCondition = not basicDeckOnlyCondition\r\n  local editedButton_parameters = {}\r\n  editedButton_parameters.index = 7\r\n  if basicDeckOnlyCondition then\r\n    editedButton_parameters.label = 'Use basic roles only\\n(Stage boss, Partner, Extra Boss).'\r\n  else\r\n    editedButton_parameters.label = 'Use all role card variants.'\r\n  end\r\n  self.editButton(editedButton_parameters)\r\nend\r\n\r\n-- Scans for cards that are in notFoundedList, and move them to the intended destination if can be found\r\n-- Intended to be used as a second search with a delay after the first search\r\n-- params {notFoundedList, roleNum, roleName, counter, deckPosition, discardPosition, rotation}\r\nfunction findNotFoundedCardsAndMove_SecondScan(p)\r\n  for i=1, #p.notFoundedList do\r\n    local o = getObjectFromGUID(p.notFoundedList[i])\r\n    if (p.counter < p.roleNum) then\r\n      if (o == nil) then\r\n        -- Searches all deck instead\r\n        local foundDeck = findDeckWithCardGUID(p.notFoundedList[i])\r\n        if (foundDeck == nil) then\r\n          print('Error: ' .. p.roleName .. ' card ' .. p.notFoundedList[i] .. ' not found.')\r\n        else\r\n          o = foundDeck.takeObject({guid=p.notFoundedList[i], position=p.deckPosition, rotation=p.rotation})\r\n          p.counter = p.counter + 1\r\n        end\r\n      else\r\n        o.setPosition(p.deckPosition)\r\n        o.setRotation(p.rotation)\r\n        p.counter = p.counter + 1\r\n      end\r\n    else\r\n      if (o == nil) then\r\n        -- Searches all deck instead\r\n        local foundDeck = findDeckWithCardGUID(p.notFoundedList[i])\r\n        if (foundDeck != nil) then\r\n          o = foundDeck.takeObject({guid=p.notFoundedList[i], position=p.discardPosition, rotation=p.rotation})\r\n        end\r\n      end\r\n      o.setPosition(p.discardPosition)\r\n      o.setRotation(p.rotation)\r\n    end\r\n  end\r\n  if(p.counter < p.roleNum) then\r\n    print('Error: Required ' .. p.roleNum .. ' ' .. p.roleName .. ' cards but only able to find ' .. p.counter .. '.')\r\n  end\r\nend\r\n\r\n-- Shuffles the deck, specified in a table which have the variable cardGUID\r\nfunction shuffleDeckWithCardGUID(p)\r\n  if p != nil then\r\n    local foundDeck = findDeckWithCardGUID(p.cardGUID)\r\n    if (foundDeck != nil) then\r\n      foundDeck.shuffle()\r\n    else\r\n      print('Error: Deck with card ' .. p.cardGUID .. ' not found.')\r\n    end\r\n  end\r\nend\r\n\r\n-- Deals the deck, specified in a table which have the variable cardGUID, cardNum\r\nfunction dealDeckWithCardGUID(p)\r\n  if p != nil then\r\n    local foundDeck = findDeckWithCardGUID(p.cardGUID)\r\n    if (foundDeck != nil) then\r\n      foundDeck.dealToAll(p.cardNum)\r\n    else\r\n      print('Error: Deck with card ' .. p.cardGUID .. ' not found.')\r\n    end\r\n  end\r\nend\r\n\r\nfunction findDeckWithCardGUID(cardGUID)\r\n  -- Searches for a card (specified by GUID) in a deck and returns true if exists,\r\n  -- for which may call deck.takeObject({guid=cardGUID}) to take it\r\n  local function isCardInDeckByGUID(cardGUID, deck)\r\n    local cardList = deck.getObjects()\r\n    for i, card in ipairs(cardList) do\r\n      if card.guid == cardGUID then\r\n        return true\r\n      end\r\n    end\r\n    return false\r\n  end\r\n\r\n  local objectList = getAllObjects()\r\n  for i, object in ipairs(objectList) do\r\n    if object.tag == 'Deck' then\r\n      if (isCardInDeckByGUID(cardGUID, object)) then\r\n        return object\r\n      end\r\n    end\r\n  end\r\n  return nil\r\nend\r\n",
      "LuaScriptState": "",
      "PhysicsMaterial": {
        "StaticFriction": 0.4,
        "DynamicFriction": 0.4,
        "Bounciness": 0.0,
        "FrictionCombine": 0,
        "BounceCombine": 0
      },
      "Rigidbody": {
        "Mass": 5.0,
        "Drag": 0.1,
        "AngularDrag": 0.1,
        "UseGravity": true
      },
      "GUID": "c8aa19",
      "AttachedSnapPoints": [
        {
          "Position": {
            "x": 0.00338573358,
            "y": 0.100000076,
            "z": -0.3169564
          },
          "Rotation": {
            "x": 1.90921568E-07,
            "y": 0.05601249,
            "z": 180.000031
          }
        }
      ]
    }
  ],
  "TabStates": {},
  "VersionNumber": ""
}